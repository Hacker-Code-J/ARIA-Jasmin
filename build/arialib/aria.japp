require "aria_globals.jinc"
require "aria_helpers.jinc"
inline fn key_expansion(
    stack u8[ARIA_BLOCK_SIZE] key,
    stack u8[ARIA_BLOCK_SIZE] rk0,
    stack u8[ARIA_BLOCK_SIZE] rk1,
    stack u8[ARIA_BLOCK_SIZE] rk2,
    stack u8[ARIA_BLOCK_SIZE] rk3,
    stack u8[ARIA_BLOCK_SIZE] rk4,
    stack u8[ARIA_BLOCK_SIZE] rk5,
    stack u8[ARIA_BLOCK_SIZE] rk6,
    stack u8[ARIA_BLOCK_SIZE] rk7,
    stack u8[ARIA_BLOCK_SIZE] rk8,
    stack u8[ARIA_BLOCK_SIZE] rk9,
    stack u8[ARIA_BLOCK_SIZE] rk10,
    stack u8[ARIA_BLOCK_SIZE] rk11,
    stack u8[ARIA_BLOCK_SIZE] rk12
) {
    stack u8[ARIA_BLOCK_SIZE] W0;
    stack u8[ARIA_BLOCK_SIZE] W1;
    stack u8[ARIA_BLOCK_SIZE] W2;
    stack u8[ARIA_BLOCK_SIZE] W3;
    stack u8[ARIA_BLOCK_SIZE] zero;
    inline int zi;
    for zi = 0 to ARIA_BLOCK_SIZE - 1 {
        zero[zi] = 0;
    }
    xor128(W0, key, zero);
    FO(W1, W0, c1);
    FE(W2, W1, c2);
    FO(W3, W2, c3);
    xor128(rk0, W0, zero);
    rot19l(rk1, W1, zero);
    rot31l(rk2, W2, zero);
    rot61l(rk3, W3, zero);
    rot31r(rk4, W2, zero);
    rot19r(rk5, W1, zero);
    xor128(rk6, W0, zero);
    rot19r(rk7, W1, zero);
    rot31r(rk8, W2, zero);
    rot61l(rk9, W3, zero);
    rot31l(rk10, W2, zero);
    rot19l(rk11, W1, zero);
    xor128(rk12, W0, zero);
}
