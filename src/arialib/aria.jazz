/* Jasmin Implementation of ARIA‑128 Block Cipher */
/* This implementation mirrors the structure of the AES‑NI‐based AES example:
   - Separate key‑schedule and round functions
   - Inline helpers, register arrays, and stack temporaries
*/

/* 1. Round Constants (CK) — RFC 5794 §3.2 */
u128 CK1 = 0x517CC1B727220A94FE13ABE8FA9A6EE0;
u128 CK2 = 0x6DB14ACC9E21C820FF28B1D5EF5DE2B0;
u128 CK3 = 0xDB92371D2126E9700324977504E8C90E;

/* 2. S‑Box Tables (256‑byte each) — fill with ARIA’s official values */
u8[256] S1 = { 
  0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
  0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
  0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
  0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
  0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
  0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
  0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
  0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
  0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
  0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
  0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
  0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
  0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
  0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
  0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
  0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16 };
u8[256] S2 = { 
  0xe2, 0x4e, 0x54, 0xfc, 0x94, 0xc2, 0x4a, 0xcc, 0x62, 0x0d, 0x6a, 0x46, 0x3c, 0x4d, 0x8b, 0xd1,
  0x5e, 0xfa, 0x64, 0xcb, 0xb4, 0x97, 0xbe, 0x2b, 0xbc, 0x77, 0x2e, 0x03, 0xd3, 0x19, 0x59, 0xc1,
  0x1d, 0x06, 0x41, 0x6b, 0x55, 0xf0, 0x99, 0x69, 0xea, 0x9c, 0x18, 0xae, 0x63, 0xdf, 0xe7, 0xbb,
  0x00, 0x73, 0x66, 0xfb, 0x96, 0x4c, 0x85, 0xe4, 0x3a, 0x09, 0x45, 0xaa, 0x0f, 0xee, 0x10, 0xeb,
  0x2d, 0x7f, 0xf4, 0x29, 0xac, 0xcf, 0xad, 0x91, 0x8d, 0x78, 0xc8, 0x95, 0xf9, 0x2f, 0xce, 0xcd,
  0x08, 0x7a, 0x88, 0x38, 0x5c, 0x83, 0x2a, 0x28, 0x47, 0xdb, 0xb8, 0xc7, 0x93, 0xa4, 0x12, 0x53,
  0xff, 0x87, 0x0e, 0x31, 0x36, 0x21, 0x58, 0x48, 0x01, 0x8e, 0x37, 0x74, 0x32, 0xca, 0xe9, 0xb1,
  0xb7, 0xab, 0x0c, 0xd7, 0xc4, 0x56, 0x42, 0x26, 0x07, 0x98, 0x60, 0xd9, 0xb6, 0xb9, 0x11, 0x40,
  0xec, 0x20, 0x8c, 0xbd, 0xa0, 0xc9, 0x84, 0x04, 0x49, 0x23, 0xf1, 0x4f, 0x50, 0x1f, 0x13, 0xdc,
  0xd8, 0xc0, 0x9e, 0x57, 0xe3, 0xc3, 0x7b, 0x65, 0x3b, 0x02, 0x8f, 0x3e, 0xe8, 0x25, 0x92, 0xe5,
  0x15, 0xdd, 0xfd, 0x17, 0xa9, 0xbf, 0xd4, 0x9a, 0x7e, 0xc5, 0x39, 0x67, 0xfe, 0x76, 0x9d, 0x43,
  0xa7, 0xe1, 0xd0, 0xf5, 0x68, 0xf2, 0x1b, 0x34, 0x70, 0x05, 0xa3, 0x8a, 0xd5, 0x79, 0x86, 0xa8,
  0x30, 0xc6, 0x51, 0x4b, 0x1e, 0xa6, 0x27, 0xf6, 0x35, 0xd2, 0x6e, 0x24, 0x16, 0x82, 0x5f, 0xda,
  0xe6, 0x75, 0xa2, 0xef, 0x2c, 0xb2, 0x1c, 0x9f, 0x5d, 0x6f, 0x80, 0x0a, 0x72, 0x44, 0x9b, 0x6c,
  0x90, 0x0b, 0x5b, 0x33, 0x7d, 0x5a, 0x52, 0xf3, 0x61, 0xa1, 0xf7, 0xb0, 0xd6, 0x3f, 0x7c, 0x6d,
  0xed, 0x14, 0xe0, 0xa5, 0x3d, 0x22, 0xb3, 0xf8, 0x89, 0xde, 0x71, 0x1a, 0xaf, 0xba, 0xb5, 0x81 };
u8[256] S3 = { 
  0x52, 0x09, 0x6a, 0xd5, 0x30, 0x36, 0xa5, 0x38, 0xbf, 0x40, 0xa3, 0x9e, 0x81, 0xf3, 0xd7, 0xfb,
  0x7c, 0xe3, 0x39, 0x82, 0x9b, 0x2f, 0xff, 0x87, 0x34, 0x8e, 0x43, 0x44, 0xc4, 0xde, 0xe9, 0xcb,
  0x54, 0x7b, 0x94, 0x32, 0xa6, 0xc2, 0x23, 0x3d, 0xee, 0x4c, 0x95, 0x0b, 0x42, 0xfa, 0xc3, 0x4e,
  0x08, 0x2e, 0xa1, 0x66, 0x28, 0xd9, 0x24, 0xb2, 0x76, 0x5b, 0xa2, 0x49, 0x6d, 0x8b, 0xd1, 0x25,
  0x72, 0xf8, 0xf6, 0x64, 0x86, 0x68, 0x98, 0x16, 0xd4, 0xa4, 0x5c, 0xcc, 0x5d, 0x65, 0xb6, 0x92,
  0x6c, 0x70, 0x48, 0x50, 0xfd, 0xed, 0xb9, 0xda, 0x5e, 0x15, 0x46, 0x57, 0xa7, 0x8d, 0x9d, 0x84,
  0x90, 0xd8, 0xab, 0x00, 0x8c, 0xbc, 0xd3, 0x0a, 0xf7, 0xe4, 0x58, 0x05, 0xb8, 0xb3, 0x45, 0x06,
  0xd0, 0x2c, 0x1e, 0x8f, 0xca, 0x3f, 0x0f, 0x02, 0xc1, 0xaf, 0xbd, 0x03, 0x01, 0x13, 0x8a, 0x6b,
  0x3a, 0x91, 0x11, 0x41, 0x4f, 0x67, 0xdc, 0xea, 0x97, 0xf2, 0xcf, 0xce, 0xf0, 0xb4, 0xe6, 0x73,
  0x96, 0xac, 0x74, 0x22, 0xe7, 0xad, 0x35, 0x85, 0xe2, 0xf9, 0x37, 0xe8, 0x1c, 0x75, 0xdf, 0x6e,
  0x47, 0xf1, 0x1a, 0x71, 0x1d, 0x29, 0xc5, 0x89, 0x6f, 0xb7, 0x62, 0x0e, 0xaa, 0x18, 0xbe, 0x1b,
  0xfc, 0x56, 0x3e, 0x4b, 0xc6, 0xd2, 0x79, 0x20, 0x9a, 0xdb, 0xc0, 0xfe, 0x78, 0xcd, 0x5a, 0xf4,
  0x1f, 0xdd, 0xa8, 0x33, 0x88, 0x07, 0xc7, 0x31, 0xb1, 0x12, 0x10, 0x59, 0x27, 0x80, 0xec, 0x5f,
  0x60, 0x51, 0x7f, 0xa9, 0x19, 0xb5, 0x4a, 0x0d, 0x2d, 0xe5, 0x7a, 0x9f, 0x93, 0xc9, 0x9c, 0xef,
  0xa0, 0xe0, 0x3b, 0x4d, 0xae, 0x2a, 0xf5, 0xb0, 0xc8, 0xeb, 0xbb, 0x3c, 0x83, 0x53, 0x99, 0x61,
  0x17, 0x2b, 0x04, 0x7e, 0xba, 0x77, 0xd6, 0x26, 0xe1, 0x69, 0x14, 0x63, 0x55, 0x21, 0x0c, 0x7d };
u8[256] S4 = { 
  0x30, 0x68, 0x99, 0x1b, 0x87, 0xb9, 0x21, 0x78, 0x50, 0x39, 0xdb, 0xe1, 0x72, 0x09, 0x62, 0x3c,
  0x3e, 0x7e, 0x5e, 0x8e, 0xf1, 0xa0, 0xcc, 0xa3, 0x2a, 0x1d, 0xfb, 0xb6, 0xd6, 0x20, 0xc4, 0x8d,
  0x81, 0x65, 0xf5, 0x89, 0xcb, 0x9d, 0x77, 0xc6, 0x57, 0x43, 0x56, 0x17, 0xd4, 0x40, 0x1a, 0x4d,
  0xc0, 0x63, 0x6c, 0xe3, 0xb7, 0xc8, 0x64, 0x6a, 0x53, 0xaa, 0x38, 0x98, 0x0c, 0xf4, 0x9b, 0xed,
  0x7f, 0x22, 0x76, 0xaf, 0xdd, 0x3a, 0x0b, 0x58, 0x67, 0x88, 0x06, 0xc3, 0x35, 0x0d, 0x01, 0x8b,
  0x8c, 0xc2, 0xe6, 0x5f, 0x02, 0x24, 0x75, 0x93, 0x66, 0x1e, 0xe5, 0xe2, 0x54, 0xd8, 0x10, 0xce,
  0x7a, 0xe8, 0x08, 0x2c, 0x12, 0x97, 0x32, 0xab, 0xb4, 0x27, 0x0a, 0x23, 0xdf, 0xef, 0xca, 0xd9,
  0xb8, 0xfa, 0xdc, 0x31, 0x6b, 0xd1, 0xad, 0x19, 0x49, 0xbd, 0x51, 0x96, 0xee, 0xe4, 0xa8, 0x41,
  0xda, 0xff, 0xcd, 0x55, 0x86, 0x36, 0xbe, 0x61, 0x52, 0xf8, 0xbb, 0x0e, 0x82, 0x48, 0x69, 0x9a,
  0xe0, 0x47, 0x9e, 0x5c, 0x04, 0x4b, 0x34, 0x15, 0x79, 0x26, 0xa7, 0xde, 0x29, 0xae, 0x92, 0xd7,
  0x84, 0xe9, 0xd2, 0xba, 0x5d, 0xf3, 0xc5, 0xb0, 0xbf, 0xa4, 0x3b, 0x71, 0x44, 0x46, 0x2b, 0xfc,
  0xeb, 0x6f, 0xd5, 0xf6, 0x14, 0xfe, 0x7c, 0x70, 0x5a, 0x7d, 0xfd, 0x2f, 0x18, 0x83, 0x16, 0xa5,
  0x91, 0x1f, 0x05, 0x95, 0x74, 0xa9, 0xc1, 0x5b, 0x4a, 0x85, 0x6d, 0x13, 0x07, 0x4f, 0x4e, 0x45,
  0xb2, 0x0f, 0xc9, 0x1c, 0xa6, 0xbc, 0xec, 0x73, 0x90, 0x7b, 0xcf, 0x59, 0x8f, 0xa1, 0xf9, 0x2d,
  0xf2, 0xb1, 0x00, 0x94, 0x37, 0x9f, 0xd0, 0x2e, 0x9c, 0x6e, 0x28, 0x3f, 0x80, 0xf0, 0x3d, 0xd3,
  0x25, 0x8a, 0xb5, 0xe7, 0x42, 0xb3, 0xc7, 0xea, 0xf7, 0x4c, 0x11, 0x33, 0x03, 0xa2, 0xac, 0x60 };

/* 3. Vector SubBytes via 16× Lookup
    Expand the 128‐bit state into 16 bytes, look each up, and reassemble
*/
inline fn S1_lookup(reg u8 idx) -> reg u8 {
  reg u8 r;
  r = S1[idx];
  return r;
}
inline fn S2_lookup(reg u8 idx) -> reg u8 {
  reg u8 r;
  r = S2[idx];
  return r;
}
inline fn S3_lookup(reg u8 idx) -> reg u8 {
  reg u8 r;
  r = S3[idx];
  return r;
}
inline fn S4_lookup(reg u8 idx) -> reg u8 {
  reg u8 r;
  r = S4[idx];
  return r;
}

inline fn EXTRACT_BYTE(reg u128 state, reg u8 idx) -> reg u8 {
  reg u8 r;
  r = (state >> (idx * 8)) & 0xff;
  return r;
}

inline fn SubBytes(reg u128 state, reg u8 sbox) -> reg u128 {
  reg u8 b0, b1, b2, b3, b4, b5, b6, b7;
  reg u8 b8, b9, b10, b11, b12, b13, b14, b15;
  reg u8 r0, r1, r2, r3, r4, r5, r6, r7;
  reg u8 r8, r9, r10, r11, r12, r13, r14, r15;
  reg u128 out;

  // extract bytes from state
  b0 = EXTRACT_BYTE(state, 0); b1 = EXTRACT_BYTE(state, 1);
  b2 = EXTRACT_BYTE(state, 2); b3 = EXTRACT_BYTE(state, 3);
  b4 = EXTRACT_BYTE(state, 4); b5 = EXTRACT_BYTE(state, 5);
  b6 = EXTRACT_BYTE(state, 6); b7 = EXTRACT_BYTE(state, 7);
  b8 = EXTRACT_BYTE(state, 8); b9 = EXTRACT_BYTE(state, 9);
  b10 = EXTRACT_BYTE(state, 10); b11 = EXTRACT_BYTE(state, 11);
  b12 = EXTRACT_BYTE(state, 12); b13 = EXTRACT_BYTE(state, 13);
  b14 = EXTRACT_BYTE(state, 14); b15 = EXTRACT_BYTE(state, 15);

  // perform table lookup per byte
  if (sbox == 1) {
    r0 = S1_lookup(b0);   r1 = S1_lookup(b1);
    r2 = S1_lookup(b2);   r3 = S1_lookup(b3);
    r4 = S1_lookup(b4);   r5 = S1_lookup(b5);
    r6 = S1_lookup(b6);   r7 = S1_lookup(b7);
    r8 = S1_lookup(b8);   r9 = S1_lookup(b9);
    r10 = S1_lookup(b10); r11 = S1_lookup(b11);
    r12 = S1_lookup(b12); r13 = S1_lookup(b13);
    r14 = S1_lookup(b14); r15 = S1_lookup(b15);
  } else if (sbox == 2) {
    r0 = S2_lookup(b0);   r1 = S2_lookup(b1);
    r2 = S2_lookup(b2);   r3 = S2_lookup(b3);
    r4 = S2_lookup(b4);   r5 = S2_lookup(b5);
    r6 = S2_lookup(b6);   r7 = S2_lookup(b7);
    r8 = S2_lookup(b8);   r9 = S2_lookup(b9);
    r10 = S2_lookup(b10); r11 = S2_lookup(b11);
    r12 = S2_lookup(b12); r13 = S2_lookup(b13);
    r14 = S2_lookup(b14); r15 = S2_lookup(b15);
  } else if (sbox == 3) {
    r0 = S3_lookup(b0);   r1 = S3_lookup(b1);
    r2 = S3_lookup(b2);   r3 = S3_lookup(b3);
    r4 = S3_lookup(b4);   r5 = S3_lookup(b5);
    r6 = S3_lookup(b6);   r7 = S3_lookup(b7);
    r8 = S3_lookup(b8);   r9 = S3_lookup(b9);
    r10 = S3_lookup(b10); r11 = S3_lookup(b11);
    r12 = S3_lookup(b12); r13 = S3_lookup(b13);
    r14 = S3_lookup(b14); r15 = S3_lookup(b15);
  } else if (sbox == 4) {
    r0 = S4_lookup(b0);   r1 = S4_lookup(b1);
    r2 = S4_lookup(b2);   r3 = S4_lookup(b3);
    r4 = S4_lookup(b4);   r5 = S4_lookup(b5);
    r6 = S4_lookup(b6);   r7 = S4_lookup(b7);
    r8 = S4_lookup(b8);   r9 = S4_lookup(b9);
    r10 = S4_lookup(b10); r11 = S4_lookup(b11);
    r12 = S4_lookup(b12); r13 = S4_lookup(b13);
    r14 = S4_lookup(b14); r15 = S4_lookup(b15);
  }
  // reassemble into a 128-bit vector
  out = (16u8)[
    r0,  r1,  r2,  r3,
    r4,  r5,  r6,  r7,
    r8,  r9,  r10, r11,
    r12, r13, r14, r15
  ];
  return out;
}


// /* 3. Substitution Layer
//      Uses VPSHUFB for parallel byte‐wise table lookup
// */
/* 3. Vector SubBytes via 16x Lookup
    Expand the 128‐bit state into 16 bytes, look each up, and reassemble
*/
// inline fn SubBytes(reg u128 state) -> reg u128 {
//   reg u8 b0, b1, b2, b3, b4, b5, b6, b7;
//   reg u8 b8, b9, b10, b11, b12, b13, b14, b15;
//   reg u8 r0, r1, r2, r3, r4, r5, r6, r7;
//   reg u8 r8, r9, r10, r11, r12, r13, r14, r15;
//   reg u128 out;

//   // extract bytes from state
//   b0 = #BYTE(state, 0); b1 = #BYTE(state, 1);
//   b2 = #BYTE(state, 2); b3 = #BYTE(state, 3);
//   b4 = #BYTE(state, 4); b5 = #BYTE(state, 5);
//   b6 = #BYTE(state, 6); b7 = #BYTE(state, 7);
//   b8 = #BYTE(state, 8); b9 = #BYTE(state, 9);
//   b10 = #BYTE(state, 10); b11 = #BYTE(state, 11);
//   b12 = #BYTE(state, 12); b13 = #BYTE(state, 13);
//   b14 = #BYTE(state, 14); b15 = #BYTE(state, 15);

//   // perform table lookup per byte
//   ro = S1_lookup(b0);   r1 = S1_lookup(b1);
//   r2 = S1_lookup(b2);   r3 = S1_lookup(b3);
//   r4 = S1_lookup(b4);   r5 = S1_lookup(b5);
//   r6 = S1_lookup(b6);   r7 = S1_lookup(b7);
//   r8 = S1_lookup(b8);   r9 = S1_lookup(b9);
//   r10 = S1_lookup(b10); r11 = S1_lookup(b11);
//   r12 = S1_lookup(b12); r13 = S1_lookup(b13);
//   r14 = S1_lookup(b14); r15 = S1_lookup(b15);

//   // reassemble into a 128-bit vector
//   out = (u128)[ r0, r1, r2, r3,
//                 r4, r5, r6, r7,
//                 r8, r9, r10, r11,
//                 r12, r13, r14, r15 ];
//   return out;
// }

/* 4. Diffusion Layer P
     Implements the linear map P via rotates and XORs
*/
// inline fn Diffusion_P(reg u128 x) -> reg u128 {
//   reg u128 t;
//   t  = x ^ #ROTL(x, 19);
//   t ^= #ROTL(x, 61);
//   t ^= #ROTL(x,  6);
//   t ^= #ROTL(x, 10);
//   t ^= #ROTL(x, 17);
//   t ^= #ROTL(x, 41);
//   t ^= #ROTL(x, 57);
//   t ^= #ROTL(x, 29);
//   return t;
// }

// /* 5. Round Functions FO and FE
//      Odd rounds (FO): SubBytes(S1,S2) -> P
//      Even rounds (FE): SubBytes(S3,S4) -> P
// */
// inline fn FO(reg u128 s) -> reg u128 {
//   s = SubBytes(s, 1);
//   s = SubBytes(s, 2);
//   s = Diffusion_P(s);
//   return s;
// }

// inline fn FE(reg u128 s) -> reg u128 {
//   s = SubBytes(s, 3);
//   s = SubBytes(s, 4);
//   s = Diffusion_P(s);
//   return s;
// }

// /* 6. Key Expansion for ARIA‑128
//       Produces 13 subkeys SK[0…12] for 12 rounds + initial whitening
// */
// inline fn aria_keys_expand_128(reg u128 K) -> reg u128[13] SK {
//   reg u128 W0, W1, W2, W3, tmp;
//   W0 = K;
//   tmp = W0 ^ CK1;    W1 = FO(tmp);
//   tmp = W1 ^ CK2;    W2 = FE(tmp);
//   tmp = W2 ^ CK3;    W3 = FO(tmp);

//   SK[0]  = W0;
//   SK[1]  = W1;
//   SK[2]  = W2;
//   SK[3]  = W3;
//   SK[4]  = W3;
//   SK[5]  = W2;
//   SK[6]  = W1;
//   SK[7]  = W0;
//   SK[8]  = W1;
//   SK[9]  = W2;
//   SK[10] = W3;
//   SK[11] = W0;
//   SK[12] = W1;
//   return SK;
// }

// /* 7. Encryption Rounds */
// inline fn AddRoundKey(reg u128 state, stack u128 rk) -> reg u128 {
//   return state ^ rk;
// }

// inline fn aria_encrypt_core(reg u128[13] SK, reg u128 PT) -> reg u128 CT {
//   reg u128 state;
//   inline int r;
//   state = AddRoundKey(PT, SK[0]);

//   for r = 1 to 11 {
//     if (r % 2 == 1) {
//       state = FO(state);
//     } else {
//       state = FE(state);
//     }
//     state = AddRoundKey(state, SK[r]);
//   }

//   ; Final round always uses FO then whitening
//   state = FO(state);
//   CT    = AddRoundKey(state, SK[12]);
//   return CT;
// }

// /* 8. Public API */
// #ifdef EXPORT_TEST
// export inline fn aria128_encrypt(reg u128 key, reg u128 plaintext) -> reg u128 {
//   reg u128[13] subkeys;
//   subkeys = aria_keys_expand_128(key);
//   return aria_encrypt_core(subkeys, plaintext);
// }
// #endif

// /* (Decryption routines—inv_SubBytes, inv_Diffusion_P, inv FO/FE,
//   inv key expansion and aria_decrypt_core—can be added analogously.)
// */

