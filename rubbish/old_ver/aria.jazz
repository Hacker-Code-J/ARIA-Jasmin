/* Jasmin Implementation of ARIA‑128 Block Cipher */
/* Reference: https://github.com/openssl/openssl/blob/master/crypto/aria/aria.c */

require "aria_globals.jinc"
require "aria_helpers.jinc"

//-----------------------------------------------------------------------------
// Key schedule (byte‑wise)
//-----------------------------------------------------------------------------
inline fn key_expansion(
    stack u8[ARIA_BLOCK_SIZE] key,
    stack u8[ARIA_BLOCK_SIZE] rk0,
    stack u8[ARIA_BLOCK_SIZE] rk1,
    stack u8[ARIA_BLOCK_SIZE] rk2,
    stack u8[ARIA_BLOCK_SIZE] rk3,
    stack u8[ARIA_BLOCK_SIZE] rk4,
    stack u8[ARIA_BLOCK_SIZE] rk5,
    stack u8[ARIA_BLOCK_SIZE] rk6,
    stack u8[ARIA_BLOCK_SIZE] rk7,
    stack u8[ARIA_BLOCK_SIZE] rk8,
    stack u8[ARIA_BLOCK_SIZE] rk9,
    stack u8[ARIA_BLOCK_SIZE] rk10,
    stack u8[ARIA_BLOCK_SIZE] rk11,
    stack u8[ARIA_BLOCK_SIZE] rk12
) {
    // Intermediate keys
    stack u8[ARIA_BLOCK_SIZE] W0;
    stack u8[ARIA_BLOCK_SIZE] W1;
    stack u8[ARIA_BLOCK_SIZE] W2;
    stack u8[ARIA_BLOCK_SIZE] W3;
    stack u8[ARIA_BLOCK_SIZE] zero;
    inline int zi;
    for zi = 0 to ARIA_BLOCK_SIZE - 1 {
        zero[zi] = 0;
    }

    // Compute W0–W3
    xor128(W0, key, zero);
    FO(W1, W0, c1);
    FE(W2, W1, c2);
    FO(W3, W2, c3);

    // Derive round keys
    xor128(rk0, W0, zero);
    rot19l(rk1, W1, zero);
    rot31l(rk2, W2, zero);
    rot61l(rk3, W3, zero);
    rot31r(rk4, W2, zero);
    rot19r(rk5, W1, zero);
    xor128(rk6, W0, zero);
    rot19r(rk7, W1, zero);
    rot31r(rk8, W2, zero);
    rot61l(rk9, W3, zero);
    rot31l(rk10, W2, zero);
    rot19l(rk11, W1, zero);
    xor128(rk12, W0, zero);
}

//-----------------------------------------------------------------------------
// Top-Level Encryption Function (byte‑wise)
//-----------------------------------------------------------------------------
inline fn aria_encrypt_stack(
    stack u8[ARIA_BLOCK_SIZE] key_buf,
    stack u8[ARIA_BLOCK_SIZE] in_buf
) -> stack u8[ARIA_BLOCK_SIZE] {
    stack u8[ARIA_BLOCK_SIZE] zero;
    inline int zi;
    for zi = 0 to ARIA_BLOCK_SIZE - 1 {
        zero[zi] = 0;
    }

    stack u8[ARIA_BLOCK_SIZE] rk0, rk1, rk2, rk3, rk4, rk5, rk6;
    stack u8[ARIA_BLOCK_SIZE] rk7, rk8, rk9, rk10, rk11, rk12;
    key_expansion(
        key_buf,
        rk0, rk1, rk2, rk3, rk4, rk5, rk6,
        rk7, rk8, rk9, rk10, rk11, rk12
    );

    stack u8[ARIA_BLOCK_SIZE] state;
    xor128(state, in_buf, rk0);
    stack u8[ARIA_BLOCK_SIZE] tmp;
    FO(tmp, state, rk1); xor128(state, tmp, zero);
    FE(tmp, state, rk2); xor128(state, tmp, zero);
    FO(tmp, state, rk3); xor128(state, tmp, zero);
    FE(tmp, state, rk4); xor128(state, tmp, zero);
    FO(tmp, state, rk5); xor128(state, tmp, zero);
    FE(tmp, state, rk6); xor128(state, tmp, zero);
    FO(tmp, state, rk7); xor128(state, tmp, zero);
    FE(tmp, state, rk8); xor128(state, tmp, zero);
    FO(tmp, state, rk9); xor128(state, tmp, zero);
    FE(tmp, state, rk10); xor128(state, tmp, zero);
    FO(tmp, state, rk11); xor128(state, tmp, zero);

    stack u8[ARIA_BLOCK_SIZE] sub_out;
    sl2(sub_out, state, rk12);
    xor128(state, sub_out, rk12);
    return state;
}

inline fn aria_encrypt_into(
    stack u8[ARIA_BLOCK_SIZE] key,
    stack u8[ARIA_BLOCK_SIZE] in_blk,
    stack u8[ARIA_BLOCK_SIZE] out_blk
) {
    stack u8[ARIA_BLOCK_SIZE] result = aria_encrypt_stack(key, in_blk);
    inline int i;
    for i = 0 to ARIA_BLOCK_SIZE - 1 {
        out_blk[i] = result[i];
    }
}

export fn aria_encrypt_export(
    reg ptr u8[ARIA_BLOCK_SIZE] key,
    reg ptr u8[ARIA_BLOCK_SIZE] in_blk
) -> reg u8 {
    stack u8[ARIA_BLOCK_SIZE] key_buf;
    stack u8[ARIA_BLOCK_SIZE] in_buf;
    stack u8[ARIA_BLOCK_SIZE] out_buf;
    inline int i;

    for i = 0 to ARIA_BLOCK_SIZE - 1 {
        key_buf[i] = key[i];
        in_buf[i] = in_blk[i];
    }

    aria_encrypt_into(key_buf, in_buf, out_buf);

    // Return just one byte (e.g. out_buf[0]) for demonstration
    // Real API would need to return each byte via a loop or custom wrapper
    return out_buf[0]; // TEMPORARY
}




// export fn jyh_aria_set_encrypt_key(
//     reg u64 userKeyAddr,      // pointer to userKey bytes
//     reg u32 bits,             // 128, 192, or 256
//     reg u64 keyPtrAddr        // pointer to ARIA_KEY struct
// ) -> reg u32 {
//     reg u32 ret;
//     ret = 0;

//     // Local buffers
//     stack u8[ARIA_BLOCK_SIZE] w0, w1, w2, w3;
//     stack u8[ARIA_BLOCK_SIZE] kr, ck1, ck2, ck3, tmp;
//     reg u32 rounds;
//     inline int i, j;

//     // // --- 1) Null pointers?
//     // if userKeyAddr == 0 || keyPtrAddr == 0 {
//     //     return -1;
//     // }

//     // --- 2) Load W0 = first 16 bytes of userKey
//     for i = 0 to ARIA_BLOCK_SIZE - 1 {
//         w0[i] = (u8)[userKeyAddr + i];
//     }

//     // --- 3) Select ARIA constants and init KR based on key length
//     if bits == 128 {
//         rounds = 12;
//         for i = 0 to ARIA_BLOCK_SIZE - 1 {
//             ck1[i] = c1[i];
//             ck2[i] = c2[i];
//             ck3[i] = c3[i];
//             kr[i]  = 0;
//         }
//     }
//     else if bits == 192 {
//         rounds = 14;
//         for i = 0 to ARIA_BLOCK_SIZE - 1 {
//             ck1[i] = c2[i];
//             ck2[i] = c3[i];
//             ck3[i] = c1[i];
//         }
//         // load half of KR from userKey[16..23], zero pad the rest
//         for i = 0 to (ARIA_BLOCK_SIZE/2 - 1) {
//             kr[i] = (u8)[userKeyAddr + ARIA_BLOCK_SIZE + i];
//         }
//         for i = ARIA_BLOCK_SIZE/2 to ARIA_BLOCK_SIZE - 1 {
//             kr[i] = 0;
//         }
//     }
//     else if bits == 256 {
//         rounds = 16;
//         for i = 0 to ARIA_BLOCK_SIZE - 1 {
//             ck1[i] = c3[i];
//             ck2[i] = c1[i];
//             ck3[i] = c2[i];
//             kr[i]  = (u8)[userKeyAddr + ARIA_BLOCK_SIZE + i];
//         }
//     }
//     else {
//         ret = -2;
//     }

//     // Store rounds count (u32) at end of ARIA_KEY
//     (u32)[ keyPtrAddr + (ARIA_MAX_KEYS * ARIA_BLOCK_SIZE) ] = rounds;

//     // --- 4) Compute intermediate Feistel words W1..W3
//     // W1 = FO(W0, CK1) ⊕ KR
//     FO(tmp, w0, ck1);
//     xor128(w1, tmp, kr);

//     // W2 = FE(W1, CK2) ⊕ W0
//     FE(tmp, w1, ck2);
//     xor128(w2, tmp, w0);

//     // W3 = FO(W2, CK3) ⊕ W1
//     FO(tmp, w2, ck3);
//     xor128(w3, tmp, w1);

//     // --- 5) Expand round keys into key->rd_key[0..rounds]
//     // We'll emit each 16‐byte subkey by rotating into 'tmp' and storing

//     // Rounds  0.. 3: rot19r
//     for i = 0 to 3 {
//         // select inputs for this index
//         if i == 0 { rot19r(tmp, w0, w1); }
//         if i == 1 { rot19r(tmp, w1, w2); }
//         if i == 2 { rot19r(tmp, w2, w3); }
//         if i == 3 { rot19r(tmp, w3, w0); }
//         // store 16 bytes
//         for j = 0 to ARIA_BLOCK_SIZE - 1 {
//             (u8)[ keyPtrAddr + (i*ARIA_BLOCK_SIZE) + j ] = tmp[j];
//         }
//     }

//     // Rounds  4.. 7: rot31r
//     for i = 4 to 7 {
//         if i == 4 { rot31r(tmp, w0, w1); }
//         if i == 5 { rot31r(tmp, w1, w2); }
//         if i == 6 { rot31r(tmp, w2, w3); }
//         if i == 7 { rot31r(tmp, w3, w0); }
//         for j = 0 to ARIA_BLOCK_SIZE - 1 {
//             (u8)[ keyPtrAddr + (i*ARIA_BLOCK_SIZE) + j ] = tmp[j];
//         }
//     }

//     // Rounds  8..11: rot61l
//     for i = 8 to 11 {
//         if i == 8  { rot61l(tmp, w0, w1); }
//         if i == 9  { rot61l(tmp, w1, w2); }
//         if i == 10 { rot61l(tmp, w2, w3); }
//         if i == 11 { rot61l(tmp, w3, w0); }
//         for j = 0 to ARIA_BLOCK_SIZE - 1 {
//             (u8)[ keyPtrAddr + (i*ARIA_BLOCK_SIZE) + j ] = tmp[j];
//         }
//     }

//     // Round 12: rot31l
//     rot31l(tmp, w0, w1);
//     for j = 0 to ARIA_BLOCK_SIZE - 1 {
//         (u8)[ keyPtrAddr + (12*ARIA_BLOCK_SIZE) + j ] = tmp[j];
//     }

//     // Rounds 13..14 if >12
//     if rounds > 12 {
//       rot31l(tmp, w1, w2);
//       for j = 0 to ARIA_BLOCK_SIZE - 1 {
//           (u8)[ keyPtrAddr + (13*ARIA_BLOCK_SIZE) + j ] = tmp[j];
//       }
//       rot31l(tmp, w2, w3);
//       for j = 0 to ARIA_BLOCK_SIZE - 1 {
//           (u8)[ keyPtrAddr + (14*ARIA_BLOCK_SIZE) + j ] = tmp[j];
//       }
//     }

//     // Rounds 15..16 if >14
//     if rounds > 14 {
//       rot31l(tmp, w3, w0);
//       for j = 0 to ARIA_BLOCK_SIZE - 1 {
//           (u8)[ keyPtrAddr + (15*ARIA_BLOCK_SIZE) + j ] = tmp[j];
//       }
//       rot19l(tmp, w0, w1);
//       for j = 0 to ARIA_BLOCK_SIZE - 1 {
//           (u8)[ keyPtrAddr + (16*ARIA_BLOCK_SIZE) + j ] = tmp[j];
//       }
//     }

//     return ret;
// }